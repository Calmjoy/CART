CART c++实现 代码设计

表示样本特征的结构体：
struct sparse_feat
{
    vector<int> id_vec;
    vector<float> value_vec;
};
//考虑回归树中特征的值不一定为整数，故使用float类型

存储树的结构体：
struct node
{
    int id;
    int j;      //the splitting variable, jth feat of feat_vec
    float s;    //the splitting point, valut of jth feat
    float c;    //the output value
    int leaf;
    int left_child;
    int right_child;
};
//考虑到将使用vector存储一棵树，故left_child和right_child使用
//int类型，存储左右孩子的id，即在数组中的位置。
//这样方便从文件中回复这棵树。

CART类定义：
class CART
{
protected:
	vector<sparse_feat> samp_feat_vec;
	vector<float> samp_class_vec;
	int feat_set_size;
	int class_set_size;
	vector<node> tree;
	int tree_id;

public:
	CART();
	~CART();
	void save_model(string model_file);
	void load_model(string model_file);
	void load_training_data(string training_file);
	void learn(int tree_type);
	vector<float> predict_vari_regression(sparse_feat samp_feat);
	vector<float> predict_class_classification(sparse_feat samp_feat);
	float predict_test_data(string test_file, string output_file, int tree_type);

protected:
	vector<string> string_split(string terms_str, string splitting_tag);
	void read_samp_file(string samp_file, vector<sparse_feat> &samp_feat_vec, vector<float> &samp_class_vec);
	float calc_acc(vector<float> &true_class_vec, vector<float> &pred_class_vec);
	void create_regression_tree();
	void create_classification_tree();
    void pruning_regression_tree();
	void pruning_classification_tree();
};
